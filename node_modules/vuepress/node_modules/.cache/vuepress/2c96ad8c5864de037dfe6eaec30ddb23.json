{"remainingRequest":"/Users/wangyaping/learn/vue-blog/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/wangyaping/learn/vue-blog/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/wangyaping/learn/vue-blog/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/wangyaping/learn/vue-blog/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/wangyaping/learn/vue-blog/docs/blog/20200108.md?vue&type=template&id=2eec3191&","dependencies":[{"path":"/Users/wangyaping/learn/vue-blog/docs/blog/20200108.md","mtime":1591755729031},{"path":"/Users/wangyaping/learn/vue-blog/node_modules/cache-loader/dist/cjs.js","mtime":1547533956260},{"path":"/Users/wangyaping/learn/vue-blog/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1588736475396},{"path":"/Users/wangyaping/learn/vue-blog/node_modules/cache-loader/dist/cjs.js","mtime":1547533956260},{"path":"/Users/wangyaping/learn/vue-blog/node_modules/vue-loader/lib/index.js","mtime":1588736475396},{"path":"/Users/wangyaping/learn/vue-blog/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1591753789235}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"content\" }, [\n      _c(\"h3\", { attrs: { id: \"urlsearchparams\" } }, [\n        _c(\n          \"a\",\n          { staticClass: \"header-anchor\", attrs: { href: \"#urlsearchparams\" } },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" URLSearchParams()\")\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"h4\",\n        {\n          attrs: {\n            id:\n              \"以前我们从url上面取参数的话，要么是字符串切割匹配，要么是正则匹配，现在浏览器已经有了内置的api接口可以对url进行处理，就是url-和-urlsearchparams\"\n          }\n        },\n        [\n          _c(\n            \"a\",\n            {\n              staticClass: \"header-anchor\",\n              attrs: {\n                href:\n                  \"#以前我们从url上面取参数的话，要么是字符串切割匹配，要么是正则匹配，现在浏览器已经有了内置的api接口可以对url进行处理，就是url-和-urlsearchparams\"\n              }\n            },\n            [_vm._v(\"#\")]\n          ),\n          _vm._v(\n            \" 以前我们从url上面取参数的话，要么是字符串切割匹配，要么是正则匹配，现在浏览器已经有了内置的API接口可以对URL进行处理，就是URL() 和 URLSearchParams()\"\n          )\n        ]\n      ),\n      _vm._v(\" \"),\n      _c(\"pre\", [\n        _c(\"code\", [\n          _vm._v(\n            \"例如： https://www.ypwang.com?name=wangwang&age=18\\n我们想要获取name参数的话，可以：\\n    new URL('https://www.ypwang.com?name=wangwang&age=18').searchParams.get('name');\\n或者\\n    new URLSearchParams('?name=wangwang&age=18').get('name');\\n\\nnew URLSearchParams 的参数,顾名思义 searchParams 就是 location.search 那部分，就是 new URLSearchParams(location.search);\\n\"\n          )\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"h4\", { attrs: { id: \"urlsearchparams-的语法：\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#urlsearchparams-的语法：\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" URLSearchParams 的语法：\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"pre\", [\n        _c(\"code\", [\n          _vm._v(\n            \"// URL查询字符串\\nnew URLSearchParams(strSearchParams);\\neg: 上面的例子就是url查询字符串\\n\\n// 查询字符序列\\nnew URLSearchParams(arrSearchSequence);\\neg: 数组形式的查询字符序列，var params1 = new URLSearchParams([['name', 'wangwang'], ['age', 18]]);\\n\\n// 查询键值对象\\nnew URLSearchParams(objSearchKeyValue);\\neg: var params2 = new URLSearchParams({\\\"name\\\": \\\"wangwang\\\", \\\"age\\\": 18})\\n\"\n          )\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"h4\", { attrs: { id: \"urlsearchparams-的实例方法：\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#urlsearchparams-的实例方法：\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" URLSearchParams 的实例方法：\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"pre\", [\n        _c(\"code\", [\n          _vm._v(\n            \"URLSearchParams.append(name, key)，添加新的键值对作为查询参数。\\nURLSearchParams.delete(name)，删除已存在的查询参数。\\nURLSearchParams.entries()，返回查询参数们的迭代器对象（可用于for of遍历）。\\nURLSearchParams.forEach(callback)，此方法可以遍历查询对象。callback是遍历方法，支持两个参数，分别是每个键值对的值和键。\\nURLSearchParams.get(name)，返回指定关键字对象的值（没有值则为null）。\\nURLSearchParams.getAll(name)，以数组形式返回所有当前查询关键字对应的值。\\nURLSearchParams.has(name)，返回布尔值，true或者false，是否包含某个查询关键字。\\nURLSearchParams.keys()，返回一个迭代器对象，允许迭代该对象中所有的关键字。\\nURLSearchParams.values()，返回一个迭代器对象，允许迭代该对象中所有的关键字值。\\nURLSearchParams.set(name, value)，有则替换，无则加冕。\\nURLSearchParams.sort()，方法将此对象中包含的所有键/值对就地排序，并返回undefined。排序顺序根据键的Unicode码位。\\nURLSearchParams.toString()，把URLSearchParams对象转换成查询字符串。\\n\"\n          )\n        ])\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}