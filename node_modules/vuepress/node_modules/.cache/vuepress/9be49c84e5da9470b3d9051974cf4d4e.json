{"remainingRequest":"/Users/wangyaping/learn/vue-blog/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/wangyaping/learn/vue-blog/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/wangyaping/learn/vue-blog/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/wangyaping/learn/vue-blog/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/wangyaping/learn/vue-blog/docs/blog/20191111.md?vue&type=template&id=cb3aee26&","dependencies":[{"path":"/Users/wangyaping/learn/vue-blog/docs/blog/20191111.md","mtime":1591755729030},{"path":"/Users/wangyaping/learn/vue-blog/node_modules/cache-loader/dist/cjs.js","mtime":1547533956260},{"path":"/Users/wangyaping/learn/vue-blog/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1588736475396},{"path":"/Users/wangyaping/learn/vue-blog/node_modules/cache-loader/dist/cjs.js","mtime":1547533956260},{"path":"/Users/wangyaping/learn/vue-blog/node_modules/vue-loader/lib/index.js","mtime":1588736475396},{"path":"/Users/wangyaping/learn/vue-blog/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1591753789235}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_c('h3',{attrs:{\"id\":\"for-循环的四种姿势\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#for-循环的四种姿势\"}},[_vm._v(\"#\")]),_vm._v(\" for 循环的四种姿势\")]),_vm._v(\" \"),_c('h4',{attrs:{\"id\":\"常用的js-的-4-种数组遍历方法：for-for-in-foreach-for-of；\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#常用的js-的-4-种数组遍历方法：for-for-in-foreach-for-of；\"}},[_vm._v(\"#\")]),_vm._v(\" 常用的JS 的 4 种数组遍历方法：for / for-in / forEach() / for-of；\")]),_vm._v(\" \"),_c('h5',{attrs:{\"id\":\"我们有多种方法来遍历-javascript-的数组或者对象，而它们之间的区别非常让人疑惑。airbnb-编码风格禁止使用-for-in-与-for-of来遍历数组，你知道为什么吗？\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#我们有多种方法来遍历-javascript-的数组或者对象，而它们之间的区别非常让人疑惑。airbnb-编码风格禁止使用-for-in-与-for-of来遍历数组，你知道为什么吗？\"}},[_vm._v(\"#\")]),_vm._v(\" 我们有多种方法来遍历 JavaScript 的数组或者对象，而它们之间的区别非常让人疑惑。Airbnb 编码风格禁止使用 for/in 与 for/of来遍历数组，你知道为什么吗？\")]),_vm._v(\" \"),_c('h4',{attrs:{\"id\":\"语法：\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#语法：\"}},[_vm._v(\"#\")]),_vm._v(\" 语法：\")]),_vm._v(\" \"),_c('pre',[_c('code',[_vm._v(\"使用for和for/in，我们可以访问数组的下标，而不是实际的数组元素值：\\n      var arr = [\\\"a\\\", \\\"b\\\", \\\"c\\\"];\\nfor (let i = 0; i < arr.length; ++i) {\\n    console.log(arr[i]);\\n}\\n​\\nfor (let i in arr) {\\n    console.log(arr[i]);\\n}\\n\\n使用for/of，则可以直接访问数组的元素值\\nfor (const v of arr) {\\n    console.log(v);\\n}\\n\\n使用forEach()，则可以同时访问数组的下标与元素值：\\n     arr.forEach((v, i) => console.log(v));\\n\")])]),_vm._v(\" \"),_c('h4',{attrs:{\"id\":\"非数字属性：\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#非数字属性：\"}},[_vm._v(\"#\")]),_vm._v(\" 非数字属性：\")]),_vm._v(\" \"),_c('pre',[_c('code',[_vm._v(\"JS的数组就是 Object，这就意味着我们可以给数组添加字符串属性：\\nvar arr = [\\\"a\\\", \\\"b\\\", \\\"c\\\"];\\ntypeof arr; // 'object'\\narr.test = \\\"bad\\\"; // 添加非数字属性\\narr.test; // 'abc'\\narr[1] === arr[\\\"1\\\"]; // true, JavaScript数组只是特殊的Object\\n\\n4 种循环语法，只有for/in不会忽略非数字属性：\\nvar arr = [\\\"a\\\", \\\"b\\\", \\\"c\\\"];\\narr.test = \\\"bad\\\";\\n​\\nfor (let i in arr) {\\n    console.log(arr[i]);  // 打印\\\"a, b, c, bad\\\"\\n}\\n\\nfor/in遍历数组的时候需要注意非数字属性，除非你真的要想要遍历非数字属性。可以使用 ESLint 的guard-for-in规则来禁止使用for/in;\\n\")])]),_vm._v(\" \"),_c('h4',{attrs:{\"id\":\"数组的空元素：\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#数组的空元素：\"}},[_vm._v(\"#\")]),_vm._v(\" 数组的空元素：\")]),_vm._v(\" \"),_c('pre',[_c('code',[_vm._v(\"JavaScript 数组可以有空元素，\\nvar arr = [\\\"a\\\", , \\\"c\\\"];\\n         arr.length; // 3\\n    对于['a', , 'c']，for/in与forEach会跳过空元素，而for与for/of则不会跳过。\\n\\narr.forEach(v => console.log(v));      // 打印\\\"a, c\\\"\\n\\nfor (let i in arr) {\\n    console.log(arr[i]);     // 打印\\\"a, c\\\"\\n     }\\n\\nfor (let i = 0; i < arr.length; ++i) {\\n    console.log(arr[i]);    // 打印\\\"a, undefined, c\\\"\\n}\\n​\\nfor (const v of arr) {\\n    console.log(v);     // 打印\\\"a, undefined, c\\\"\\n}\\n\\n有一个神奇的现象，\\nvar arr = [\\\"a\\\", , \\\"c\\\"];\\narr[1];    //  undefined\\n但是当你直接赋值undefined时候\\n var arr = ['a', undefined, 'c'] ;\\n    4 种循环语法一致，打印的都是\\\"a, undefined, c\\\"。\\n\\n  还有一个神奇的现象：\\nvar arr = [\\\"a\\\",undefined, \\\"c\\\"];\\nvar b = JSON.parse(JSON.stringify(arr));\\nb;   // 打印 ['a', null, 'c']\\n\\nvar arr = [\\\"a\\\",, \\\"c\\\"];\\nvar b = [...arr];\\nb;  // 打印 ['a', undefined, 'c']\\n\\ntips:for，for/in与for/of会保留外部作用域的this。对于forEach， 除非使用箭头函数，它的回调函数的 this 将会变化。还有一点是，尽量不要在forEach中使用 aysnc/await 以及 generators。\\n\")])]),_vm._v(\" \"),_c('h4',{attrs:{\"id\":\"结论：\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#结论：\"}},[_vm._v(\"#\")]),_vm._v(\" 结论：\")]),_vm._v(\" \"),_c('pre',[_c('code',[_vm._v(\"简单地说，for/of是遍历数组最可靠的方式，它比for循环简洁，并且没有for/in和forEach()那么多奇怪的特例。for/of的缺点是我们取索引值不方便。\\n使用for/of获取数组索引，可以这样写：\\nfor (const [i, v] of arr.entries()) {\\n    console.log(i, v);\\n}\\nentries() 方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对。\\n\")])])])}]\n\nexport { render, staticRenderFns }"]}