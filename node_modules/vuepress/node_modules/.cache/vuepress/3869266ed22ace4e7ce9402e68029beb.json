{"remainingRequest":"/Users/wangyaping/learn/vue-blog/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/wangyaping/learn/vue-blog/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/wangyaping/learn/vue-blog/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/wangyaping/learn/vue-blog/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/wangyaping/learn/vue-blog/docs/blog/20200430.md?vue&type=template&id=34315ef9&","dependencies":[{"path":"/Users/wangyaping/learn/vue-blog/docs/blog/20200430.md","mtime":1591753943351},{"path":"/Users/wangyaping/learn/vue-blog/node_modules/cache-loader/dist/cjs.js","mtime":1547533956260},{"path":"/Users/wangyaping/learn/vue-blog/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1588736475396},{"path":"/Users/wangyaping/learn/vue-blog/node_modules/cache-loader/dist/cjs.js","mtime":1547533956260},{"path":"/Users/wangyaping/learn/vue-blog/node_modules/vue-loader/lib/index.js","mtime":1588736475396},{"path":"/Users/wangyaping/learn/vue-blog/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1591753789235}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"content\" }, [\n      _c(\"h6\", { attrs: { id: \"_1、你对html语义化的理解\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#_1、你对html语义化的理解\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 1、你对HTML语义化的理解\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"简单来说，就是合适的标签做合适的事情\\n有助于构架良好的HTML结构，有利于搜索引擎的建立索引、抓取，利于SEO\\n有利于不同设备的解析\\n有利于构建清晰的机构，有利于团队的开发、维护\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"h6\", { attrs: { id: \"_2、介绍一下css盒模型：\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#_2、介绍一下css盒模型：\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 2、介绍一下CSS盒模型：\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"标准盒模型(box-sizing属性为conten-box)，width = content;\\nIE盒模型(box-sizing属性为border-box)，width = content + padding + border;\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"h6\",\n        { attrs: { id: \"_3、处理过移动端自适应布局的问题吗？怎么解决的？\" } },\n        [\n          _c(\n            \"a\",\n            {\n              staticClass: \"header-anchor\",\n              attrs: {\n                href: \"#_3、处理过移动端自适应布局的问题吗？怎么解决的？\"\n              }\n            },\n            [_vm._v(\"#\")]\n          ),\n          _vm._v(\" 3、处理过移动端自适应布局的问题吗？怎么解决的？\")\n        ]\n      ),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"媒体查询，flexible(rem)，vw，vh\")]),\n      _vm._v(\" \"),\n      _c(\"h6\", { attrs: { id: \"_3、px和em和rem的区别\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#_3、px和em和rem的区别\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 3、px和em和rem的区别\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"px: 像素，相对长度单位。像素px是相对于显示器屏幕分辨率而言的\\nem的值并不是固定的，会继承父级元素的字体大小，代表倍数\\nrem的值并不是固定的，始终是基于根元素 html 的，也代表倍数\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"h6\", { attrs: { id: \"_4、css优先级如何计算？\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#_4、css优先级如何计算？\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 4、CSS优先级如何计算？\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"优先级就近原则，同权重情况下样式定义最近者为准\\n载入样式以最后载入的定位为准\\n优先级为: !important > id > class > tag; !important 比 内联优先级高\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"h6\", { attrs: { id: \"_5、position的值有哪些\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#_5、position的值有哪些\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 5、position的值有哪些\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"static： 默认值。没有定位，元素出现在正常的流中\\nrelative（相对定位）：生成相对定位的元素,相对于其正常（原先本身）位置进行定位\\nabsolute（绝对定位）：生成绝对定位的元素，相对于static定位以外的第一个父元素进行定位\\nfixed（固定定位）：生成绝对定位的元素，相对于浏览器窗口进行定位\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"h6\",\n        { attrs: { id: \"_6、介绍一下flex布局，以及你用过的flex的一些属性\" } },\n        [\n          _c(\n            \"a\",\n            {\n              staticClass: \"header-anchor\",\n              attrs: {\n                href: \"#_6、介绍一下flex布局，以及你用过的flex的一些属性\"\n              }\n            },\n            [_vm._v(\"#\")]\n          ),\n          _vm._v(\" 6、介绍一下flex布局，以及你用过的flex的一些属性\")\n        ]\n      ),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"flex-direction：决定主轴的方向（即项目的排列方向）。\\nflex-wrap：决定换行\\nflex-flow：flex-direction属性和flex-wrap属性的简写形式\\njustify-content：主轴上的对齐方式（水平方向对齐方式）\\nalign-items：垂直方向对齐方式\\nalign-content：多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"h6\", { attrs: { id: \"_7、垂直居中有哪些方法？\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#_7、垂直居中有哪些方法？\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 7、垂直居中有哪些方法？\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"单行文本的话可以使用height和line-height设置同一高度。\\n定高： position + margin（负的自身高度的一半）\\n不定高：position + transform\\nflex布局\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"h6\",\n        { attrs: { id: \"_8、cookies、sessionstorage和localstorage区别\" } },\n        [\n          _c(\n            \"a\",\n            {\n              staticClass: \"header-anchor\",\n              attrs: { href: \"#_8、cookies、sessionstorage和localstorage区别\" }\n            },\n            [_vm._v(\"#\")]\n          ),\n          _vm._v(\" 8、cookies、sessionStorage和localStorage区别\")\n        ]\n      ),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"cookie一般是网站为了标示用户身份而储存在用户本地终端上的数据。\\ncookie数据始终在同源的http请求中携带，即会在浏览器和服务器间来回传递。\\nsessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"存储大小：\\ncookie数据大小不能超过4K。\\nsessionStorage和localStorage虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"有期时间：\\nlocalStorage：存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；\\nsessionStorage：数据在当前浏览器窗口关闭后自动删除\\ncookie：设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"h6\", { attrs: { id: \"_9、标签上title与alt属性的区别是什么？\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#_9、标签上title与alt属性的区别是什么？\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 9、标签上title与alt属性的区别是什么？\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"Alt当图片不显示时，用文字代表\\nTitle为该属性提供信息\")]),\n      _vm._v(\" \"),\n      _c(\"h6\", { attrs: { id: \"_10、介绍一下css-sprites-如何使用？\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#_10、介绍一下css-sprites-如何使用？\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 10、介绍一下css sprites,如何使用？\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"css 精灵图，把一堆小的图片整合到一张大的图片（png）上，减轻服务器对图片的请求数量。\"\n        )\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}