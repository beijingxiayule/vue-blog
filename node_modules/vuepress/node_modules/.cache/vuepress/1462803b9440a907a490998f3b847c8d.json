{"remainingRequest":"/Users/wangyaping/learn/vue-blog/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/wangyaping/learn/vue-blog/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/wangyaping/learn/vue-blog/docs/blog/20191111.md?vue&type=template&id=cb3aee26&","dependencies":[{"path":"/Users/wangyaping/learn/vue-blog/docs/blog/20191111.md","mtime":1591755729030},{"path":"/Users/wangyaping/learn/vue-blog/node_modules/cache-loader/dist/cjs.js","mtime":1547533956260},{"path":"/Users/wangyaping/learn/vue-blog/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1588736475396},{"path":"/Users/wangyaping/learn/vue-blog/node_modules/cache-loader/dist/cjs.js","mtime":1547533956260},{"path":"/Users/wangyaping/learn/vue-blog/node_modules/vue-loader/lib/index.js","mtime":1588736475396},{"path":"/Users/wangyaping/learn/vue-blog/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1591753789235}],"contextDependencies":[],"result":["\n<div class=\"content\"><h3 id=\"for-循环的四种姿势\"><a class=\"header-anchor\" href=\"#for-循环的四种姿势\">#</a> for 循环的四种姿势</h3>\n<h4 id=\"常用的js-的-4-种数组遍历方法：for-for-in-foreach-for-of；\"><a class=\"header-anchor\" href=\"#常用的js-的-4-种数组遍历方法：for-for-in-foreach-for-of；\">#</a> 常用的JS 的 4 种数组遍历方法：for / for-in / forEach() / for-of；</h4>\n<h5 id=\"我们有多种方法来遍历-javascript-的数组或者对象，而它们之间的区别非常让人疑惑。airbnb-编码风格禁止使用-for-in-与-for-of来遍历数组，你知道为什么吗？\"><a class=\"header-anchor\" href=\"#我们有多种方法来遍历-javascript-的数组或者对象，而它们之间的区别非常让人疑惑。airbnb-编码风格禁止使用-for-in-与-for-of来遍历数组，你知道为什么吗？\">#</a> 我们有多种方法来遍历 JavaScript 的数组或者对象，而它们之间的区别非常让人疑惑。Airbnb 编码风格禁止使用 for/in 与 for/of来遍历数组，你知道为什么吗？</h5>\n<h4 id=\"语法：\"><a class=\"header-anchor\" href=\"#语法：\">#</a> 语法：</h4>\n<pre><code>使用for和for/in，我们可以访问数组的下标，而不是实际的数组元素值：\n      var arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];\nfor (let i = 0; i &lt; arr.length; ++i) {\n    console.log(arr[i]);\n}\n​\nfor (let i in arr) {\n    console.log(arr[i]);\n}\n\n使用for/of，则可以直接访问数组的元素值\nfor (const v of arr) {\n    console.log(v);\n}\n\n使用forEach()，则可以同时访问数组的下标与元素值：\n     arr.forEach((v, i) =&gt; console.log(v));\n</code></pre>\n<h4 id=\"非数字属性：\"><a class=\"header-anchor\" href=\"#非数字属性：\">#</a> 非数字属性：</h4>\n<pre><code>JS的数组就是 Object，这就意味着我们可以给数组添加字符串属性：\nvar arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];\ntypeof arr; // 'object'\narr.test = &quot;bad&quot;; // 添加非数字属性\narr.test; // 'abc'\narr[1] === arr[&quot;1&quot;]; // true, JavaScript数组只是特殊的Object\n\n4 种循环语法，只有for/in不会忽略非数字属性：\nvar arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];\narr.test = &quot;bad&quot;;\n​\nfor (let i in arr) {\n    console.log(arr[i]);  // 打印&quot;a, b, c, bad&quot;\n}\n\nfor/in遍历数组的时候需要注意非数字属性，除非你真的要想要遍历非数字属性。可以使用 ESLint 的guard-for-in规则来禁止使用for/in;\n</code></pre>\n<h4 id=\"数组的空元素：\"><a class=\"header-anchor\" href=\"#数组的空元素：\">#</a> 数组的空元素：</h4>\n<pre><code>JavaScript 数组可以有空元素，\nvar arr = [&quot;a&quot;, , &quot;c&quot;];\n         arr.length; // 3\n    对于['a', , 'c']，for/in与forEach会跳过空元素，而for与for/of则不会跳过。\n\narr.forEach(v =&gt; console.log(v));      // 打印&quot;a, c&quot;\n\nfor (let i in arr) {\n    console.log(arr[i]);     // 打印&quot;a, c&quot;\n     }\n\nfor (let i = 0; i &lt; arr.length; ++i) {\n    console.log(arr[i]);    // 打印&quot;a, undefined, c&quot;\n}\n​\nfor (const v of arr) {\n    console.log(v);     // 打印&quot;a, undefined, c&quot;\n}\n\n有一个神奇的现象，\nvar arr = [&quot;a&quot;, , &quot;c&quot;];\narr[1];    //  undefined\n但是当你直接赋值undefined时候\n var arr = ['a', undefined, 'c'] ;\n    4 种循环语法一致，打印的都是&quot;a, undefined, c&quot;。\n\n  还有一个神奇的现象：\nvar arr = [&quot;a&quot;,undefined, &quot;c&quot;];\nvar b = JSON.parse(JSON.stringify(arr));\nb;   // 打印 ['a', null, 'c']\n\nvar arr = [&quot;a&quot;,, &quot;c&quot;];\nvar b = [...arr];\nb;  // 打印 ['a', undefined, 'c']\n\ntips:for，for/in与for/of会保留外部作用域的this。对于forEach， 除非使用箭头函数，它的回调函数的 this 将会变化。还有一点是，尽量不要在forEach中使用 aysnc/await 以及 generators。\n</code></pre>\n<h4 id=\"结论：\"><a class=\"header-anchor\" href=\"#结论：\">#</a> 结论：</h4>\n<pre><code>简单地说，for/of是遍历数组最可靠的方式，它比for循环简洁，并且没有for/in和forEach()那么多奇怪的特例。for/of的缺点是我们取索引值不方便。\n使用for/of获取数组索引，可以这样写：\nfor (const [i, v] of arr.entries()) {\n    console.log(i, v);\n}\nentries() 方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对。\n</code></pre>\n</div>\n",null]}