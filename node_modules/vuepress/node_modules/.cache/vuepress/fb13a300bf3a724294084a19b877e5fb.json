{"remainingRequest":"/Users/wangyaping/learn/vue-blog/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/wangyaping/learn/vue-blog/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/wangyaping/learn/vue-blog/docs/blog/20200430.md?vue&type=template&id=9eb93712&","dependencies":[{"path":"/Users/wangyaping/learn/vue-blog/docs/blog/20200430.md","mtime":1591755729031},{"path":"/Users/wangyaping/learn/vue-blog/node_modules/cache-loader/dist/cjs.js","mtime":1547533956260},{"path":"/Users/wangyaping/learn/vue-blog/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1588736475396},{"path":"/Users/wangyaping/learn/vue-blog/node_modules/cache-loader/dist/cjs.js","mtime":1547533956260},{"path":"/Users/wangyaping/learn/vue-blog/node_modules/vue-loader/lib/index.js","mtime":1588736475396},{"path":"/Users/wangyaping/learn/vue-blog/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1591753789235}],"contextDependencies":[],"result":["\n<div class=\"content\"><h6 id=\"_1、你对html语义化的理解\"><a class=\"header-anchor\" href=\"#_1、你对html语义化的理解\">#</a> 1、你对HTML语义化的理解</h6>\n<p>简单来说，就是合适的标签做合适的事情\n有助于构架良好的HTML结构，有利于搜索引擎的建立索引、抓取，利于SEO\n有利于不同设备的解析\n有利于构建清晰的机构，有利于团队的开发、维护</p>\n<h6 id=\"_2、介绍一下css盒模型：\"><a class=\"header-anchor\" href=\"#_2、介绍一下css盒模型：\">#</a> 2、介绍一下CSS盒模型：</h6>\n<p>标准盒模型(box-sizing属性为conten-box)，width = content;\nIE盒模型(box-sizing属性为border-box)，width = content + padding + border;</p>\n<h6 id=\"_3、处理过移动端自适应布局的问题吗？怎么解决的？\"><a class=\"header-anchor\" href=\"#_3、处理过移动端自适应布局的问题吗？怎么解决的？\">#</a> 3、处理过移动端自适应布局的问题吗？怎么解决的？</h6>\n<p>媒体查询，flexible(rem)，vw，vh</p>\n<h6 id=\"_3、px和em和rem的区别\"><a class=\"header-anchor\" href=\"#_3、px和em和rem的区别\">#</a> 3、px和em和rem的区别</h6>\n<p>px: 像素，相对长度单位。像素px是相对于显示器屏幕分辨率而言的\nem的值并不是固定的，会继承父级元素的字体大小，代表倍数\nrem的值并不是固定的，始终是基于根元素 html 的，也代表倍数</p>\n<h6 id=\"_4、css优先级如何计算？\"><a class=\"header-anchor\" href=\"#_4、css优先级如何计算？\">#</a> 4、CSS优先级如何计算？</h6>\n<p>优先级就近原则，同权重情况下样式定义最近者为准\n载入样式以最后载入的定位为准\n优先级为: !important &gt; id &gt; class &gt; tag; !important 比 内联优先级高</p>\n<h6 id=\"_5、position的值有哪些\"><a class=\"header-anchor\" href=\"#_5、position的值有哪些\">#</a> 5、position的值有哪些</h6>\n<p>static： 默认值。没有定位，元素出现在正常的流中\nrelative（相对定位）：生成相对定位的元素,相对于其正常（原先本身）位置进行定位\nabsolute（绝对定位）：生成绝对定位的元素，相对于static定位以外的第一个父元素进行定位\nfixed（固定定位）：生成绝对定位的元素，相对于浏览器窗口进行定位</p>\n<h6 id=\"_6、介绍一下flex布局，以及你用过的flex的一些属性\"><a class=\"header-anchor\" href=\"#_6、介绍一下flex布局，以及你用过的flex的一些属性\">#</a> 6、介绍一下flex布局，以及你用过的flex的一些属性</h6>\n<p>flex-direction：决定主轴的方向（即项目的排列方向）。\nflex-wrap：决定换行\nflex-flow：flex-direction属性和flex-wrap属性的简写形式\njustify-content：主轴上的对齐方式（水平方向对齐方式）\nalign-items：垂直方向对齐方式\nalign-content：多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>\n<h6 id=\"_7、垂直居中有哪些方法？\"><a class=\"header-anchor\" href=\"#_7、垂直居中有哪些方法？\">#</a> 7、垂直居中有哪些方法？</h6>\n<p>单行文本的话可以使用height和line-height设置同一高度。\n定高： position + margin（负的自身高度的一半）\n不定高：position + transform\nflex布局</p>\n<h6 id=\"_8、cookies、sessionstorage和localstorage区别\"><a class=\"header-anchor\" href=\"#_8、cookies、sessionstorage和localstorage区别\">#</a> 8、cookies、sessionStorage和localStorage区别</h6>\n<p>cookie一般是网站为了标示用户身份而储存在用户本地终端上的数据。\ncookie数据始终在同源的http请求中携带，即会在浏览器和服务器间来回传递。\nsessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存</p>\n<p>存储大小：\ncookie数据大小不能超过4K。\nsessionStorage和localStorage虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</p>\n<p>有期时间：\nlocalStorage：存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；\nsessionStorage：数据在当前浏览器窗口关闭后自动删除\ncookie：设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭</p>\n<h6 id=\"_9、标签上title与alt属性的区别是什么？\"><a class=\"header-anchor\" href=\"#_9、标签上title与alt属性的区别是什么？\">#</a> 9、标签上title与alt属性的区别是什么？</h6>\n<p>Alt当图片不显示时，用文字代表\nTitle为该属性提供信息</p>\n<h6 id=\"_10、介绍一下css-sprites-如何使用？\"><a class=\"header-anchor\" href=\"#_10、介绍一下css-sprites-如何使用？\">#</a> 10、介绍一下css sprites,如何使用？</h6>\n<p>css 精灵图，把一堆小的图片整合到一张大的图片（png）上，减轻服务器对图片的请求数量。</p>\n</div>\n",null]}