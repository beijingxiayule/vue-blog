{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{205:function(r,n,a){\"use strict\";a.r(n);var o=a(0),t=Object(o.a)({},(function(){var r=this,n=r.$createElement,a=r._self._c||n;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":r.$parent.slotKey}},[a(\"h3\",{attrs:{id:\"for-循环的四种姿势\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#for-循环的四种姿势\"}},[r._v(\"#\")]),r._v(\" for 循环的四种姿势\")]),r._v(\" \"),a(\"h4\",{attrs:{id:\"常用的js-的-4-种数组遍历方法：for-for-in-foreach-for-of；\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#常用的js-的-4-种数组遍历方法：for-for-in-foreach-for-of；\"}},[r._v(\"#\")]),r._v(\" 常用的JS 的 4 种数组遍历方法：for / for-in / forEach() / for-of；\")]),r._v(\" \"),a(\"h5\",{attrs:{id:\"我们有多种方法来遍历-javascript-的数组或者对象，而它们之间的区别非常让人疑惑。airbnb-编码风格禁止使用-for-in-与-for-of来遍历数组，你知道为什么吗？\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#我们有多种方法来遍历-javascript-的数组或者对象，而它们之间的区别非常让人疑惑。airbnb-编码风格禁止使用-for-in-与-for-of来遍历数组，你知道为什么吗？\"}},[r._v(\"#\")]),r._v(\" 我们有多种方法来遍历 JavaScript 的数组或者对象，而它们之间的区别非常让人疑惑。Airbnb 编码风格禁止使用 for/in 与 for/of来遍历数组，你知道为什么吗？\")]),r._v(\" \"),a(\"h4\",{attrs:{id:\"语法：\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#语法：\"}},[r._v(\"#\")]),r._v(\" 语法：\")]),r._v(\" \"),a(\"pre\",[a(\"code\",[r._v('使用for和for/in，我们可以访问数组的下标，而不是实际的数组元素值：\\n      var arr = [\"a\", \"b\", \"c\"];\\nfor (let i = 0; i < arr.length; ++i) {\\n    console.log(arr[i]);\\n}\\n​\\nfor (let i in arr) {\\n    console.log(arr[i]);\\n}\\n\\n使用for/of，则可以直接访问数组的元素值\\nfor (const v of arr) {\\n    console.log(v);\\n}\\n\\n使用forEach()，则可以同时访问数组的下标与元素值：\\n     arr.forEach((v, i) => console.log(v));\\n')])]),r._v(\" \"),a(\"h4\",{attrs:{id:\"非数字属性：\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#非数字属性：\"}},[r._v(\"#\")]),r._v(\" 非数字属性：\")]),r._v(\" \"),a(\"pre\",[a(\"code\",[r._v('JS的数组就是 Object，这就意味着我们可以给数组添加字符串属性：\\nvar arr = [\"a\", \"b\", \"c\"];\\ntypeof arr; // \\'object\\'\\narr.test = \"bad\"; // 添加非数字属性\\narr.test; // \\'abc\\'\\narr[1] === arr[\"1\"]; // true, JavaScript数组只是特殊的Object\\n\\n4 种循环语法，只有for/in不会忽略非数字属性：\\nvar arr = [\"a\", \"b\", \"c\"];\\narr.test = \"bad\";\\n​\\nfor (let i in arr) {\\n    console.log(arr[i]);  // 打印\"a, b, c, bad\"\\n}\\n\\nfor/in遍历数组的时候需要注意非数字属性，除非你真的要想要遍历非数字属性。可以使用 ESLint 的guard-for-in规则来禁止使用for/in;\\n')])]),r._v(\" \"),a(\"h4\",{attrs:{id:\"数组的空元素：\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数组的空元素：\"}},[r._v(\"#\")]),r._v(\" 数组的空元素：\")]),r._v(\" \"),a(\"pre\",[a(\"code\",[r._v('JavaScript 数组可以有空元素，\\nvar arr = [\"a\", , \"c\"];\\n         arr.length; // 3\\n    对于[\\'a\\', , \\'c\\']，for/in与forEach会跳过空元素，而for与for/of则不会跳过。\\n\\narr.forEach(v => console.log(v));      // 打印\"a, c\"\\n\\nfor (let i in arr) {\\n    console.log(arr[i]);     // 打印\"a, c\"\\n     }\\n\\nfor (let i = 0; i < arr.length; ++i) {\\n    console.log(arr[i]);    // 打印\"a, undefined, c\"\\n}\\n​\\nfor (const v of arr) {\\n    console.log(v);     // 打印\"a, undefined, c\"\\n}\\n\\n有一个神奇的现象，\\nvar arr = [\"a\", , \"c\"];\\narr[1];    //  undefined\\n但是当你直接赋值undefined时候\\n var arr = [\\'a\\', undefined, \\'c\\'] ;\\n    4 种循环语法一致，打印的都是\"a, undefined, c\"。\\n\\n  还有一个神奇的现象：\\nvar arr = [\"a\",undefined, \"c\"];\\nvar b = JSON.parse(JSON.stringify(arr));\\nb;   // 打印 [\\'a\\', null, \\'c\\']\\n\\nvar arr = [\"a\",, \"c\"];\\nvar b = [...arr];\\nb;  // 打印 [\\'a\\', undefined, \\'c\\']\\n\\ntips:for，for/in与for/of会保留外部作用域的this。对于forEach， 除非使用箭头函数，它的回调函数的 this 将会变化。还有一点是，尽量不要在forEach中使用 aysnc/await 以及 generators。\\n')])]),r._v(\" \"),a(\"h4\",{attrs:{id:\"结论：\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#结论：\"}},[r._v(\"#\")]),r._v(\" 结论：\")]),r._v(\" \"),a(\"pre\",[a(\"code\",[r._v(\"简单地说，for/of是遍历数组最可靠的方式，它比for循环简洁，并且没有for/in和forEach()那么多奇怪的特例。for/of的缺点是我们取索引值不方便。\\n使用for/of获取数组索引，可以这样写：\\nfor (const [i, v] of arr.entries()) {\\n    console.log(i, v);\\n}\\nentries() 方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对。\\n\")])])])}),[],!1,null,null,null);n.default=t.exports}}]);","extractedComments":[]}